services:
  database:
    image: postgres:17-alpine
    container_name: database
    environment:
      POSTGRES_USER: ${DB_USERNAME:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-test}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data

  # --- Single Node Kafka (Profile: kafka) ---
  kafka:
    image: apache/kafka:4.0.0
    container_name: kafka-single
    hostname: kafka-single
    environment:
      CLUSTER_ID: "ciWo7ZmFR4qf6Q8zk_HWPA"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-single:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,OUTSIDE://:9094"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-single:9092,OUTSIDE://localhost:9094"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9094:9094"
    volumes:
      - kafka_data_single:/tmp/kafka-logs
    command: >
      bash -c "if [ ! -f /tmp/kafka-logs/cluster_id ]; then
        kafka-storage.sh format -t $$CLUSTER_ID -c /etc/kafka/kafka.properties --ignore-formatted
      fi &&
      kafka-server-start.sh /etc/kafka/kafka.properties"
    profiles:
      - kafka

  # --- Multi-Node Kafka Cluster (Profile: kafka-ha) ---
  kafka-1:
    image: apache/kafka:4.0.0
    container_name: kafka-1
    hostname: kafka-1
    environment:
      CLUSTER_ID: "generate_new_unique_kraft_cluster_id1"
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,OUTSIDE://:9094"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-1:9092,OUTSIDE://localhost:9094"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9094:9094"
    volumes:
      - kafka_data_1:/tmp/kafka-logs
    command: >
      bash -c "if [ ! -f /tmp/kafka-logs/cluster_id ]; then
        kafka-storage.sh format -t $$CLUSTER_ID -c /etc/kafka/kafka.properties --ignore-formatted
      fi &&
      kafka-server-start.sh /etc/kafka/kafka.properties"
    profiles:
      - kafka-ha

  kafka-2:
    image: apache/kafka:4.0.0
    container_name: kafka-2
    hostname: kafka-2
    environment:
      CLUSTER_ID: "generate_new_unique_kraft_cluster_id2"
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,OUTSIDE://:9095"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-2:9092,OUTSIDE://localhost:9095"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9095:9095"
    volumes:
      - kafka_data_2:/tmp/kafka-logs
    command: >
      bash -c "if [ ! -f /tmp/kafka-logs/cluster_id ]; then
        kafka-storage.sh format -t $$CLUSTER_ID -c /etc/kafka/kafka.properties --ignore-formatted
      fi &&
      kafka-server-start.sh /etc/kafka/kafka.properties"
    profiles:
      - kafka-ha

  kafka-3:
    image: apache/kafka:4.0.0
    container_name: kafka-3
    hostname: kafka-3
    environment:
      CLUSTER_ID: "generate_new_unique_kraft_cluster_id3"
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093,OUTSIDE://:9096"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-3:9092,OUTSIDE://localhost:9096"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    ports:
      - "9096:9096"
    volumes:
      - kafka_data_3:/tmp/kafka-logs
    command: >
      bash -c "if [ ! -f /tmp/kafka-logs/cluster_id ]; then
        kafka-storage.sh format -t $$CLUSTER_ID -c /etc/kafka/kafka.properties --ignore-formatted
      fi &&
      kafka-server-start.sh /etc/kafka/kafka.properties"
    profiles:
      - kafka-ha

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.123.0
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./infrastructure/observability/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
    depends_on:
      - prometheus
      - tempo
      - loki
    profiles:
      - lgtm

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:v3.2.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --web.console.templates=/etc/prometheus/consoles
      - --web.enable-lifecycle
      - --web.enable-otlp-receiver
    volumes:
      - ./infrastructure/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    profiles:
      - lgtm

  # Loki for logs
  loki:
    image: grafana/loki:3.4.3
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./infrastructure/observability/loki/local-config.yaml:/etc/loki/local-config.yaml
    user: "0"
    ports:
      - "3100:3100"
    profiles:
      - lgtm

  # Tempo for traces
  tempo:
    image: grafana/tempo:2.7.2
    container_name: tempo
    command: ["-config.file=/etc/tempo/tempo-config.yaml"]
    volumes:
      - ./infrastructure/observability/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml
    ports:
      - "3200:3200"
      - "14317:4317"
    user: "0"
    profiles:
      - lgtm

  # Grafana for visualization
  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    volumes:
      - ./infrastructure/observability/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./infrastructure/observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./infrastructure/observability/grafana/provisioning/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - loki
      - tempo
    profiles:
      - lgtm

volumes:
  db_data:
  kafka_data_single:
  kafka_data_1:
  kafka_data_2:
  kafka_data_3:
